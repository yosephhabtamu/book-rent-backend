// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  email       String     @unique
  fullName    String
  location    String
  phoneNumber String
  password    String
  role        Role       @default(user)
  isActive    Boolean    @default(true)
  wallet      Float      @default(0.0)
  books       BookUser[]
  rents       BookRent[]
}

// Define the BookType model
model BookType {
  id         String     @id @default(uuid()) @db.Uuid
  title      String
  author     String
  available  Boolean    @default(true)
  status     BookStatus @default(pending)
  categoryId String     @db.Uuid
  category   Category   @relation(fields: [categoryId], references: [id])
  owners     BookUser[]
  BookRent   BookRent[]
}

// Define the BookUser model (for managing ownership and pricing)
model BookUser {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @db.Uuid
  bookId String @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
  book      BookType   @relation(fields: [bookId], references: [id])
  bookRents BookRent[]
  quantity  Int
  price     Float
}

// Define the BookRent model (for managing book rentals)
model BookRent {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  bookId     String    @db.Uuid
  user       User      @relation(references: [id], fields: [userId])
  book       BookType  @relation(references: [id], fields: [bookId])
  lentDate   DateTime  @default(now())
  returnDate DateTime?
  BookUser   BookUser? @relation(fields: [bookUserId], references: [id])
  bookUserId String?   @db.Uuid
}

// Define the Category model
model Category {
  id    String     @id @default(uuid()) @db.Uuid
  name  String
  books BookType[] // Relation to books in this category
}

// Define enums
enum Role {
  admin
  owner
  user
}

enum BookStatus {
  pending // Book is uploaded but not yet approved
  approved // Book is approved and available for rent
  rejected // Book is rejected and not available for rent
}
